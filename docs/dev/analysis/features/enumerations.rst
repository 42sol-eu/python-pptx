
Enumerations
============


Overview
--------

A large number of settings in PowerPoint are a selection between a small,
finite set of discrete choices. Often, in the XML, these are represented by
a simple type defined as an enumeration of a set of short string values. This
page describes the strategy for providing access to these sets of values in
the various parts of the library that require them.


Notes
-----

* The general strategy is to provide a set of classes, one for each
  enumeration, that serves as the single source for all reference and
  behavior for that enumeration.
* These enumerations correspond one-to-one with Microsoft API enumerations.
* The naming is based on the Microsoft enumeration. .. all-caps snake case
  from the original mixed-case.


Feature requirements
~~~~~~~~~~~~~~~~~~~~

All required values and mappings are defined in the enumeration class. All
required names, data structures, and methods are generated by the metaclass.
They don't have to be generated manually.

* [ ] feature: dotted name access

      enumeration values can be accessed from a class with dotted notation,
      e.g. MSO_FOO.BAR_BAZ

* [ ] feature: alias decorator

      one or more convenience aliases can be declared for an Enumeration
      subclass by use of an @alias decorator

* [ ] feature: membership validation

      In order to allow invalid input values to raise ValueError exceptions
      at the API method level, the enumeration shall provide an is_member()
      class method that returns false if the value passed as an argument is
      not a member of the enumeration. E.g. assert
      MSO_AUTO_SIZE.is_member('foobar') is False
          
* [ ] feature: to/from XML translation

  + [ ] does it replace a ST_* class in oxml?

      In order to support DRY translation between enumeration values and XML
      simple type (ST_*) attribute values, the Enumeration class shall
      provide both to_xml(enum_value) and from_xml(attr_value) methods where
      enumeration values map to XML attribute values.


* [ ] feature: auto-generate documentation

      In order to provide single-source for both code and documentation, the
      Enumeration class shall provide a documentation page generation method
      that generates Sphinx RST source for a documentation page for the
      enumeration. This page source shall be available as either the
      docstring (__doc__) value of the class or its __str__ value. The
      supplied docstring shall be pre-pended to the generated portion after
      the top matter such as page title and reference link are generated.

* [ ] feature: __str__ on members has member name

      In order to provide the developer with a directly readable name for an
      enumeration value (rather than a raw int), each enum values shall have
      a __str__ method that returns the class.member string. E.g.::

          >>> print("textframe.auto_size is '%s'" % textframe.auto_size)
          textframe.auto_size is 'MSO_AUTO_SIZE.SHAPE_TO_FIT_TEXT'

* [ ] feature: out-of-band values -- like None, True, and False

* [ ] should add numeric enum value to documentation page?

* STAR_10_POINT, 149, 'star10', '10-point star.'

* [ ] ? url to original for reference?


Code Sketches
-------------

enabling an @alias decorator to define aliases for an enumeration class::

    #!/usr/bin/env python

    from __future__ import absolute_import, print_function


    def alias(*aliases):
        """
        Decorating a class with @alias('FOO', 'BAR', ..) allows the class to
        be referenced by each of the names provided as arguments.
        """
        def decorator(cls):
            for alias in aliases:
                globals()[alias] = cls
            return cls
        return decorator


    @alias('BAR', 'BAZ')
    class FOO(object):
        BAR = 'Foobarish'


    print("FOO.BAR => '%s'" % FOO.BAR)
    print("BAR.BAR => '%s'" % BAR.BAR)  # noqa
    print("BAZ.BAR => '%s'" % BAZ.BAR)  # noqa
