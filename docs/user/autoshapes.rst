
Working with Auto Shapes
========================

Auto shapes are regular shape shapes. Squares, circles, triangles, stars, that
sort of thing. There are 182 different auto shapes to choose from. 120 of these
have adjustment "handles" you can use to change the shape, sometimes dramatically.


Adding an auto shape
--------------------

The following code adds a rounded rectangle shape, one inch square, and
positioned one inch from the top-left corner of the slide::

    from pptx.constants import MSO_SHAPE

    left = top = width = height = Inches(1.0)
    shape = shapes.add_shape(
        MSO_SHAPE.ROUNDED_RECTANGLE, left, top, width, height
    )

See :ref:`Auto Shape Types <MsoAutoShapeType>` for a list of all 182 auto shape
types.


Adjusting an autoshape
----------------------

Many auto shapes have adjustments. In PowerPoint, these show up as little
yellow diamonds you can drag to change the look of the shape. They're a little
fiddly to work with via a program, but if you have the patience to get them
right, you can achieve some remarkable effects with great precision.


Shape Adjustment Concepts
~~~~~~~~~~~~~~~~~~~~~~~~~

There are a few concepts it's worthwhile to grasp before trying to do serious
work with adjustments.

First, adjustments are particular to a specific auto shape type. Each auto
shape has between zero and eight adjustments. What each of them does is
arbitrary and depends on the shape design.

Conceptually, adjustments are guides, in many ways like the light blue ones you
can align to in the PowerPoint UI and other drawing apps. These don't show, but
they operate in a similar way, each defining an x or y value that part of the
shape will align to, changing the proportions of the shape.

Adjustment values are large integers, each based on a nominal value of 100,000.
The effective value of an adjustment is proportional to the width or height of
the shape. So a value of 50,000 for an x-coordinate adjustment corresponds to
half the width of the shape; a value of 75,000 for a y-coordinate adjustment
corresponds to 3/4 of the shape height.

Adjustment values can be negative, generally indicating the coordinate is to
the left or above the top left corner (origin) of the shape. Values can also be
subject to limits, meaning their effective value cannot be outside a prescribed
range. In practice this corresponds to a point not being able to extend beyond
the left side of the shape, for example.

Spending some time fooling around with shape adjustments in PowerPoint is time
well spent to build an intuitive sense of how they behave. You also might want
to have ``opc-diag`` installed so you can look at the XML values that are
generated by different adjustments as a head start on developing your
adjustment code.


The following code formats a callout shape using its adjustments::

    callout_sp = shapes.add_shape(
        MSO_SHAPE.LINE_CALLOUT_2_ACCENT_BAR, left, top, width, height
    )

    # get the callout line coming out of the right place
    adjs = callout_sp.adjustments
    adjs[0] = 0.5   # vert pos of junction in margin line, 0 is top
    adjs[1] = 0.0   # horz pos of margin ln wrt shape width, 0 is left side
    adjs[2] = 0.5   # vert pos of elbow wrt margin line, 0 is top
    adjs[3] = -0.1  # horz pos of elbow wrt shape width, 0 is margin line
    adjs[4] = 3.0   # vert pos of line end wrt shape height, 0 is top
    a5 = adjs[3] - (adjs[4] - adjs[0]) * height/width
    adjs[5] = a5    # horz pos of elbow wrt shape width, 0 is margin line

    # rotate 45 degrees counter-clockwise
    callout_sp.rotation = -45.0
