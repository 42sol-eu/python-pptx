# encoding: utf-8

"""Test data for unit tests"""

from pptx.oxml import parse_xml_bytes
from pptx.oxml.ns import nsdecls
from pptx.text import _Paragraph


class BaseBuilder(object):
    """
    Provides common behavior for all data builders.
    """
    nsdecls = ' %s' % nsdecls('p')

    def __init__(self):
        """Establish instance variables with default values"""
        self._empty = False
        self._indent = 0
        self._nsdecls = ''

    @property
    def element(self):
        """Return element based on XML generated by builder"""
        elm = parse_xml_bytes(self.xml)
        return elm

    @property
    def is_empty(self):
        return True

    def with_indent(self, indent):
        """Add integer *indent* spaces at beginning of element XML"""
        self._indent = indent
        return self

    def with_nsdecls(self):
        self._nsdecls = self.nsdecls
        return self

    @property
    def xml_bytes(self):
        return self.xml.encode('utf-8')


class CT_TextCharacterPropertiesBuilder(BaseBuilder):
    """
    Test data builder for CT_TextCharacterProperties (<a:rPr>) XML element
    that appears as a child of <a:r>.
    """
    def __init__(self):
        """Establish instance variables with default values"""
        super(CT_TextCharacterPropertiesBuilder, self).__init__()
        self._b = ''
        self._i = ''

    def with_b(self, value):
        """
        Return the builder (self) after adding a b attribute containing the
        string value of *value*.
        """
        self._b = ' b="%s"' % str(value)
        return self

    def with_i(self, value):
        """
        Return the builder (self) after adding a i attribute containing the
        string value of *value*.
        """
        self._i = ' i="%s"' % str(value)
        return self

    def with_nsdecls(self):
        self._nsdecls = ' %s' % nsdecls('a')
        return self

    @property
    def xml(self, indent=0):
        """
        Return element XML based on attribute settings
        """
        indent_str = ' ' * indent
        tmpl = '%s<a:rPr%s%s%s/>'
        xml = tmpl % (indent_str, self._nsdecls, self._b, self._i)
        return xml


class _TestTextXml(object):
    """XML snippets of text-related elements for use in unit tests"""
    @property
    def centered_paragraph(self):
        """
        XML for centered paragraph
        """
        return (
            '<a:p %s>\n'
            '  <a:pPr algn="ctr"/>\n'
            '</a:p>\n' % nsdecls('a')
        )

    @property
    def paragraph(self):
        """
        XML for a default, empty paragraph
        """
        return '<a:p %s/>\n' % nsdecls('a')


class _TestTextElements(object):
    """Text elements for use in unit tests"""
    @property
    def centered_paragraph(self):
        return parse_xml_bytes(test_text_xml.centered_paragraph)

    @property
    def paragraph(self):
        return parse_xml_bytes(test_text_xml.paragraph)


class _TestTextObjects(object):
    """Text object instances for use in unit tests"""
    @property
    def paragraph(self):
        return _Paragraph(test_text_elements.paragraph)


def an_rPr():
    """Return a CT_TextCharacterPropertiesBuilder instance"""
    return CT_TextCharacterPropertiesBuilder()


test_text_xml = _TestTextXml()
test_text_elements = _TestTextElements()
test_text_objects = _TestTextObjects()
