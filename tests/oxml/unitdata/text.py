# encoding: utf-8

"""Test data for unit tests"""

from pptx.oxml import parse_xml_bytes
from pptx.oxml.ns import nsdecls
from pptx.text import _Paragraph


class BaseBuilder(object):
    """
    Provides common behavior for all data builders.
    """
    nsdecls = ' %s' % nsdecls('p')

    def __init__(self):
        """Establish instance variables with default values"""
        self._empty = False
        self._indent = 0
        self._nsdecls = ''
        self._xmlattrs = {}
        self._xmlattr_method_map = {}
        for xmlattr_name in self.__attrs__:
            self._xmlattrs[xmlattr_name] = ''
            method_name = 'with_%s' % xmlattr_name
            self._xmlattr_method_map[method_name] = xmlattr_name

    def __getattr__(self, name):
        """
        Intercept attribute access to generalize "with_{xmlattr_name}()"
        methods.
        """
        if name in self._xmlattr_method_map:
            def with_xmlattr(value):
                xmlattr_name = self._xmlattr_method_map[name]
                self._set_xmlattr(xmlattr_name, value)
                return self
            return with_xmlattr
        else:
            tmpl = "'%s' object has no attribute '%s'"
            raise AttributeError(tmpl % (self.__class__.__name__, name))

    @property
    def element(self):
        """Return element based on XML generated by builder"""
        elm = parse_xml_bytes(self.xml())
        return elm

    @property
    def is_empty(self):
        return True

    def with_indent(self, indent):
        """Add integer *indent* spaces at beginning of element XML"""
        self._indent = indent
        return self

    def with_nsdecls(self):
        self._nsdecls = ' %s' % nsdecls(*self.__nspfxs__)
        return self

    def xml(self, indent=0):
        """
        Return element XML based on attribute settings
        """
        indent_str = ' ' * indent
        xml = ('%s<%s%s%s/>\n' %
               (indent_str, self.__tag__, self._nsdecls, self._xmlattrs_str))
        return xml

    def xml_bytes(self, indent=0):
        return self.xml(indent=indent).encode('utf-8')

    def _set_xmlattr(self, xmlattr_name, value):
        xmlattr_str = ' %s="%s"' % (xmlattr_name, str(value))
        self._xmlattrs[xmlattr_name] = xmlattr_str

    @property
    def _xmlattrs_str(self):
        """
        Return all element attributes as a string, like ' foo="bar" x="1"'.
        """
        xmlattrs_str = ''
        for xmlattr_name in sorted(self._xmlattrs.keys()):
            xmlattrs_str += self._xmlattrs[xmlattr_name]
        return xmlattrs_str


class CT_TextCharacterPropertiesBuilder(BaseBuilder):
    """
    Test data builder for CT_TextCharacterProperties (<a:rPr>) XML element
    that appears as a child of <a:r>.
    """
    __tag__ = 'a:rPr'
    __nspfxs__ = ('a',)
    __attrs__ = ('b', 'i', 'sz')


class _TestTextXml(object):
    """XML snippets of text-related elements for use in unit tests"""
    @property
    def centered_paragraph(self):
        """
        XML for centered paragraph
        """
        return (
            '<a:p %s>\n'
            '  <a:pPr algn="ctr"/>\n'
            '</a:p>\n' % nsdecls('a')
        )

    @property
    def paragraph(self):
        """
        XML for a default, empty paragraph
        """
        return '<a:p %s/>\n' % nsdecls('a')


class _TestTextElements(object):
    """Text elements for use in unit tests"""
    @property
    def centered_paragraph(self):
        return parse_xml_bytes(test_text_xml.centered_paragraph)

    @property
    def paragraph(self):
        return parse_xml_bytes(test_text_xml.paragraph)


class _TestTextObjects(object):
    """Text object instances for use in unit tests"""
    @property
    def paragraph(self):
        return _Paragraph(test_text_elements.paragraph)


def an_rPr():
    """Return a CT_TextCharacterPropertiesBuilder instance"""
    return CT_TextCharacterPropertiesBuilder()


test_text_xml = _TestTextXml()
test_text_elements = _TestTextElements()
test_text_objects = _TestTextObjects()
