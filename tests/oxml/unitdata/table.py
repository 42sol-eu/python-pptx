# encoding: utf-8

"""
Test data for table-related unit tests.
"""

from __future__ import absolute_import

from pptx.oxml import parse_xml_bytes
from pptx.oxml.ns import nsdecls
from pptx.shapes.table import _Cell

from ...unitdata import BaseBuilder


class CT_TableBuilder(object):
    """Test data builder for CT_Table (tbl) XML element"""
    empty_tbl_tmpl = (
        '<a:tbl %s/>%s\n'
    )
    with_props_tmpl = (
        '<a:tbl %s>\n'
        '  <a:tblPr%s/>\n'
        '</a:tbl>\n'
    )

    def __init__(self):
        """Establish instance variables with default values"""
        self._tmpl = CT_TableBuilder.empty_tbl_tmpl
        self._properties = []

    @property
    def _tblPr_attrs_str(self):
        """String containing all attributes of tblPr element"""
        s = ''
        for prop in self._properties:
            s += ' %s="%s"' % prop
        return s

    @property
    def xml(self):
        """
        Return XML string based on settings accumulated via method calls
        """
        return self._tmpl % (nsdecls('a'), self._tblPr_attrs_str)

    @property
    def element(self):
        """Return element based on XML generated by builder"""
        return parse_xml_bytes(self.xml)

    @property
    def with_tblPr(self):
        """include tblPr element even if it's empty"""
        self._tmpl = CT_TableBuilder.with_props_tmpl
        return self

    def with_prop(self, name, value):
        """add property named *name* with specified *value*"""
        self._tmpl = CT_TableBuilder.with_props_tmpl
        self._properties.append((name, value))
        return self


class CT_TableCellBuilder(BaseBuilder):
    __tag__ = 'a:tc'
    __nspfxs__ = ('a',)
    __attrs__ = ('rowSpan', 'gridSpan', 'hMerge', 'vMerge', 'id')


class CT_TableCellPropertiesBuilder(BaseBuilder):
    __tag__ = 'a:tcPr'
    __nspfxs__ = ('a',)
    __attrs__ = (
        'marL', 'marR', 'marT', 'marB', 'vert', 'anchor', 'anchorCtr',
        'horzOverflow'
    )


class CT_TextBodyBuilder(BaseBuilder):
    __tag__ = 'a:txBody'
    __nspfxs__ = ('a',)
    __attrs__ = ()


def a_tbl():
    return CT_TableBuilder()


def a_tc():
    return CT_TableCellBuilder()


def a_tcPr():
    return CT_TableCellPropertiesBuilder()


def a_txBody():
    return CT_TextBodyBuilder()


class _TestTableXml(object):
    """XML snippets of table-related elements for use in unit tests"""
    @property
    def cell(self):
        """
        XML for empty default table cell
        """
        return (
            '<a:tc %s>\n'
            '  <a:txBody>\n'
            '    <a:bodyPr/>\n'
            '    <a:lstStyle/>\n'
            '    <a:p/>\n'
            '  </a:txBody>\n'
            '  <a:tcPr/>\n'
            '</a:tc>\n' % nsdecls('a')
        )

    @property
    def cell_with_margins(self):
        """
        XML for cell having top, left, right, and bottom margin settings
        """
        return (
            '<a:tc %s>\n'
            '  <a:txBody>\n'
            '    <a:bodyPr/>\n'
            '    <a:lstStyle/>\n'
            '    <a:p/>\n'
            '  </a:txBody>\n'
            '  <a:tcPr marT="12" marR="34" marB="56" marL="78"/>\n'
            '</a:tc>\n' % nsdecls('a')
        )

    @property
    def top_aligned_cell(self):
        """
        XML for empty top-aligned table cell
        """
        return (
            '<a:tc %s>\n'
            '  <a:txBody>\n'
            '    <a:bodyPr/>\n'
            '    <a:lstStyle/>\n'
            '    <a:p/>\n'
            '  </a:txBody>\n'
            '  <a:tcPr anchor="t"/>\n'
            '</a:tc>\n' % nsdecls('a')
        )


class _TestTableElements(object):
    """Table-related elements for use in unit tests"""
    @property
    def cell(self):
        return parse_xml_bytes(test_table_xml.cell)

    @property
    def cell_with_margins(self):
        return parse_xml_bytes(test_table_xml.cell_with_margins)

    @property
    def isolated_tbl(self):
        return parse_xml_bytes(test_table_xml.isolated_tbl)

    @property
    def isolated_tbl_with_true_props(self):
        return parse_xml_bytes(test_table_xml.isolated_tbl_with_true_props)

    @property
    def top_aligned_cell(self):
        return parse_xml_bytes(test_table_xml.top_aligned_cell)


class _TestTableObjects(object):
    """Table-related object instances for use in unit tests"""
    @property
    def cell(self):
        return _Cell(test_table_elements.cell, None)


test_table_xml = _TestTableXml()
test_table_elements = _TestTableElements()
test_table_objects = _TestTableObjects()
