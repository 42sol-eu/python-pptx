# encoding: utf-8

"""Test data for unit tests"""

from pptx.oxml import parse_xml_bytes
from pptx.oxml.ns import nsdecls
from pptx.shapes.table import _Cell
from pptx.text import _Paragraph


class CT_CorePropertiesBuilder(object):
    """
    Test data builder for CT_CoreProperties (cp:coreProperties) XML element
    """
    properties = (
        ('author',           'dc:creator'),
        ('category',         'cp:category'),
        ('comments',         'dc:description'),
        ('content_status',   'cp:contentStatus'),
        ('created',          'dcterms:created'),
        ('identifier',       'dc:identifier'),
        ('keywords',         'cp:keywords'),
        ('language',         'dc:language'),
        ('last_modified_by', 'cp:lastModifiedBy'),
        ('last_printed',     'cp:lastPrinted'),
        ('modified',         'dcterms:modified'),
        ('revision',         'cp:revision'),
        ('subject',          'dc:subject'),
        ('title',            'dc:title'),
        ('version',          'cp:version'),
    )

    def __init__(self):
        """Establish instance variables with default values"""
        for propname, tag in self.properties:
            setattr(self, '_%s' % propname, None)

    @property
    def _ns_prefixes(self):
        ns_prefixes = ['cp', 'dc', 'dcterms']
        for propname, tag in self.properties:
            value = getattr(self, '_%s' % propname)
            if value is None:
                continue
            ns_prefix = tag.split(':')[0]
            if ns_prefix not in ns_prefixes:
                ns_prefixes.append(ns_prefix)
            if ns_prefix == 'dcterms' and 'xsi' not in ns_prefixes:
                ns_prefixes.append('xsi')
        return tuple(ns_prefixes)

    @property
    def props_xml(self):
        props_xml = ''
        for propname, tag in self.properties:
            value = getattr(self, '_%s' % propname)
            if value is None:
                continue
            if value == '':
                xml = '  <%s/>\n' % tag
            else:
                if tag.startswith('dcterms:'):
                    xml = ('  <%s xsi:type="dcterms:W3CDTF">%s</%s>\n' %
                           (tag, value, tag))
                else:
                    xml = '  <%s>%s</%s>\n' % (tag, value, tag)
            props_xml += xml
        return props_xml

    @property
    def coreProperties(self):
        if self.props_xml:
            coreProperties = (
                '<cp:coreProperties %s>\n%s</cp:coreProperties>\n' %
                (nsdecls(*self._ns_prefixes), self.props_xml)
            )
        else:
            coreProperties = (
                '<cp:coreProperties %s/>\n' % nsdecls('cp', 'dc', 'dcterms')
            )
        return coreProperties

    @property
    def element(self):
        """Return element based on XML generated by builder"""
        return parse_xml_bytes(self.xml)

    def with_child(self, name, value):
        """add property element for *name* set to *value*"""
        setattr(self, '_%s' % name, value)
        return self

    def with_date_prop(self, name, value):
        """add date property element for *name* set to *value*"""
        setattr(self, '_%s' % name, value)
        return self

    def with_revision(self, value):
        """add revision element set to *value*"""
        self._revision = value
        return self

    @property
    def xml(self):
        """
        Return XML string based on settings accumulated via method calls
        """
        return self.coreProperties


class CT_TableBuilder(object):
    """Test data builder for CT_Table (tbl) XML element"""
    empty_tbl_tmpl = (
        '<a:tbl %s/>%s\n'
    )
    with_props_tmpl = (
        '<a:tbl %s>\n'
        '  <a:tblPr%s/>\n'
        '</a:tbl>\n'
    )

    def __init__(self):
        """Establish instance variables with default values"""
        self._tmpl = CT_TableBuilder.empty_tbl_tmpl
        self._properties = []

    @property
    def _tblPr_attrs_str(self):
        """String containing all attributes of tblPr element"""
        s = ''
        for prop in self._properties:
            s += ' %s="%s"' % prop
        return s

    @property
    def xml(self):
        """
        Return XML string based on settings accumulated via method calls
        """
        return self._tmpl % (nsdecls('a'), self._tblPr_attrs_str)

    @property
    def element(self):
        """Return element based on XML generated by builder"""
        return parse_xml_bytes(self.xml)

    @property
    def with_tblPr(self):
        """include tblPr element even if it's empty"""
        self._tmpl = CT_TableBuilder.with_props_tmpl
        return self

    def with_prop(self, name, value):
        """add property named *name* with specified *value*"""
        self._tmpl = CT_TableBuilder.with_props_tmpl
        self._properties.append((name, value))
        return self


def a_coreProperties():
    """Syntactic sugar to construct a CT_CorePropertiesBuilder instance"""
    return CT_CorePropertiesBuilder()


def a_tbl():
    """Syntactic sugar to construct a CT_TableBuilder"""
    return CT_TableBuilder()


class _TestTableXml(object):
    """XML snippets of table-related elements for use in unit tests"""
    @property
    def cell(self):
        """
        XML for empty default table cell
        """
        return (
            '<a:tc %s>\n'
            '  <a:txBody>\n'
            '    <a:bodyPr/>\n'
            '    <a:lstStyle/>\n'
            '    <a:p/>\n'
            '  </a:txBody>\n'
            '</a:tc>\n' % nsdecls('a')
        )

    @property
    def cell_with_margins(self):
        """
        XML for cell having top, left, right, and bottom margin settings
        """
        return (
            '<a:tc %s>\n'
            '  <a:txBody>\n'
            '    <a:bodyPr/>\n'
            '    <a:lstStyle/>\n'
            '    <a:p/>\n'
            '  </a:txBody>\n'
            '  <a:tcPr marT="12" marR="34" marB="56" marL="78"/>\n'
            '</a:tc>\n' % nsdecls('a')
        )

    @property
    def top_aligned_cell(self):
        """
        XML for empty top-aligned table cell
        """
        return (
            '<a:tc %s>\n'
            '  <a:txBody>\n'
            '    <a:bodyPr/>\n'
            '    <a:lstStyle/>\n'
            '    <a:p/>\n'
            '  </a:txBody>\n'
            '  <a:tcPr anchor="t"/>\n'
            '</a:tc>\n' % nsdecls('a')
        )


test_table_xml = _TestTableXml()


class _TestTextXml(object):
    """XML snippets of text-related elements for use in unit tests"""
    @property
    def centered_paragraph(self):
        """
        XML for centered paragraph
        """
        return (
            '<a:p %s>\n'
            '  <a:pPr algn="ctr"/>\n'
            '</a:p>\n' % nsdecls('a')
        )

    @property
    def paragraph(self):
        """
        XML for a default, empty paragraph
        """
        return '<a:p %s/>\n' % nsdecls('a')


test_text_xml = _TestTextXml()


class _TestTableElements(object):
    """Table-related elements for use in unit tests"""
    @property
    def cell(self):
        return parse_xml_bytes(test_table_xml.cell)

    @property
    def cell_with_margins(self):
        return parse_xml_bytes(test_table_xml.cell_with_margins)

    @property
    def isolated_tbl(self):
        return parse_xml_bytes(test_table_xml.isolated_tbl)

    @property
    def isolated_tbl_with_true_props(self):
        return parse_xml_bytes(test_table_xml.isolated_tbl_with_true_props)

    @property
    def top_aligned_cell(self):
        return parse_xml_bytes(test_table_xml.top_aligned_cell)


test_table_elements = _TestTableElements()


class _TestTextElements(object):
    """Text elements for use in unit tests"""
    @property
    def centered_paragraph(self):
        return parse_xml_bytes(test_text_xml.centered_paragraph)

    @property
    def paragraph(self):
        return parse_xml_bytes(test_text_xml.paragraph)


test_text_elements = _TestTextElements()


class _TestTableObjects(object):
    """Table-related object instances for use in unit tests"""
    @property
    def cell(self):
        return _Cell(test_table_elements.cell)


test_table_objects = _TestTableObjects()


class _TestTextObjects(object):
    """Text object instances for use in unit tests"""
    @property
    def paragraph(self):
        return _Paragraph(test_text_elements.paragraph)


test_text_objects = _TestTextObjects()
